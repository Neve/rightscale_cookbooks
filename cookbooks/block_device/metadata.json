{
  "name": "block_device",
  "description": "Installs/Configures block device storage.",
  "long_description": "# RightScale Block Device Cookbook\n\n## DESCRIPTION:\n\nThis cookbook provides the building blocks for multi-cloud backup/restore\nsupport. It leverages RightScale's 1.0 and 1.5 API for performing volume\nmanagement across multiple clouds.\n\n## REQUIREMENTS:\n\n* The block device tools depend on the `rightscale::install_tools`\n  recipe.\n* Requires a virtual machine launched from a RightScale-managed RightImage.\n\n## COOKBOOKS DEPENDENCIES:\n\nPlease see `metadata.rb` file for the latest dependencies.\n\n## KNOWN LIMITATIONS:\n\n* Rackspace requires an instance size of 512MB or larger. An instance size of\n  256MB is not supported. (w-3947)\n* Multiple block devices are not supported on Rackspace.\n\n## SETUP/USAGE:\n\n### Getting started and taking the first backup:\n\n1. Import the latest version of 'Storage Toolbox (Chef)' ServerTemplate into\n   your RightScale account.\n2. Set up a new deployment. Add a server into the deployment using the\n   toolbox ServerTemplate and launch the server.\n3. Once the server is operational consider it in a 'pristine state'. Nothing\n   will happen other than installing the tools until you run an operational\n   recipe. You can modify this behavior by cloning the ServerTemplate and\n   changing the list of recipes to run on boot.\n4. Run the \"block_device::setup_block_device\" recipe, which attaches\n   storage based on the volume size and number of volumes you have specified.\n   The storage is located in '/mnt/storage1' by default.\n5. Add your data into /mnt/storage1.\n6. Run the recipe \"block_device::do_primary_backup\". This recipe detects\n   what cloud you are on and performs a backup to the local cloud persistence\n   service.\n\n### Continuous Backups with CRON:\n\n1. Enable continuous backups by running the recipe\n   \"block_device::setup_continuous_backups\". This sets up a cron job.\n2. You can disable backups at any time by running the\n   \"block_device::do_disable_continuous_backups\" recipe, which removes\n   the cron job that was performing backups.\n\n### Force Reset:\n\n1. WARNING: The \"block_device::do_force_reset\" recipe detaches all storage\n   related to your lineage and DESTROYS the volumes! You should only run\n   this recipe if you want to restore your database to a pristine state\n   and do not want to save any of its data. After running the\n   \"block_device::do_force_reset\" recipe you can then run the\n   \"block_device::setup_block_device\" or \"block_device::do_restore\" recipes.\n\n### Restore:\n\n1. Start from a pristine state (fresh launch of a new server or using a server\n   that's been reset).\n2. Run the \"block_device::do_restore\" recipe.\n\nMix and match recipes to get the right combination for your deployments.\n\n### Delete Volumes and Terminate\n\n1. Delete the attached volumes and terminate the server. Note: if this script\n   is not used to terminate the server the volumes will persist.\n\n### Set up ephemeral device\n\n1. To set up ephemeral file systems on clouds supporting ephemeral devices,\n   place the `block_device::setup_ephemeral` recipe in your runlist.\n2. The file system type set up in the ephemeral device can be configured by\n   setting the \"Ephemeral File System Type\" input. By default, this input is\n   set to 'xfs'. NOTE: On RedHat images, this input is ignored and 'ext3' file\n   system is installed by default (RedHat does not support the 'xfs' file system\n   type).\n\n## DETAILS:\n\nMultiple block device support is controlled by the\n`block_device/devices_to_use` input. It can be a comma-separated list of\ndevice names or '*' to indicate all devices. By default, there are two available\nblock devices. Currently, in order to add more block devices you need to\noverride the cookbook. Instructions can be found at: [Increase the Number of\nBlock Devices][Guide]\n\n[Guide]: http://support.rightscale.com/12-Guides/Chef_Cookbooks_Developer_Guide/08-Chef_Development/Increase_the_Number_of_Block_Devices\n\nThe volume nicknames are made unique by appending the RightScale instance's uuid\nto the provided nickname input. In case of \"stop/start\" operation (supported by\ninstances launched with EBS images), the uuid of the first instance before the\n\"stop\" operation is used.\n\n## LICENSE:\n\nCopyright RightScale, Inc. All rights reserved.\nAll access and use subject to the RightScale Terms of Service available at\nhttp://www.rightscale.com/terms.php and, if applicable, other agreements\nsuch as a RightScale Master Subscription Agreement.\n",
  "maintainer": "RightScale, Inc.",
  "maintainer_email": "support@rightscale.com",
  "license": "Copyright RightScale, Inc. All rights reserved.",
  "platforms": {
  },
  "dependencies": {
    "rightscale": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
    "block_device/devices_to_use": {
      "display_name": "Block Device(s) to Operate On",
      "description": "The block device(s) to operate on. Can be a comma-separated list of device names or '*' to indicate all devices. Example: device1",
      "required": "recommended",
      "default": "device1",
      "recipes": [
        "block_device::do_primary_backup",
        "block_device::do_primary_restore",
        "block_device::do_secondary_backup",
        "block_device::do_secondary_restore",
        "block_device::do_primary_backup_schedule_enable",
        "block_device::do_primary_backup_schedule_disable",
        "block_device::setup_block_device",
        "block_device::do_force_reset"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "block_device/devices/default/backup/primary/cred/user": {
      "display_name": "Primary Backup User (default)",
      "description": "Primary cloud authentication credentials. For Rackspace Cloud Files, use your Rackspace login username (e.g., cred:RACKSPACE_USERNAME). For OpenStack Swift the format is: 'tenantID:username'. For clouds that do not require primary credentials (e.g., Amazon), set to 'ignore'. Example: cred:CLOUD_ACCOUNT_USERNAME ",
      "required": "recommended",
      "default": "",
      "recipes": [
        "block_device::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "block_device/devices/default/backup/primary/cred/secret": {
      "display_name": "Primary Backup Secret (default)",
      "description": "Primary cloud authentication credentials. For Rackspace Cloud Files, use your Rackspace account API key (e.g., cred:RACKSPACE_AUTH_KEY). For clouds that do not require primary credentials (e.g., Amazon), set to 'ignore'. Example: cred:CLOUD_ACCOUNT_KEY",
      "required": "recommended",
      "default": "",
      "recipes": [
        "block_device::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    }
  },
  "groupings": {
    "block_device/devices/default": {
      "title": "Block Device Defaults",
      "description": "Default attributes for all block devices."
    },
    "block_device/devices/device1": {
      "title": "Block Device 1",
      "description": "Attributes for the block device: device1."
    },
    "block_device/devices/device2": {
      "title": "Block Device 2",
      "description": "Attributes for the block device: device2."
    }
  },
  "recipes": {
    "block_device::default": "Sets up input dependencies for use by other cookbooks.",
    "block_device::setup_block_device": "Creates, formats, and mounts a brand new block device on the instance.",
    "block_device::setup_ephemeral": "Creates, formats, and mounts a brand new block device on the instance's ephemeral drives. Does nothing on clouds without ephemeral drives.",
    "block_device::do_primary_backup": {
      "description": "Creates a primary backup in the local cloud where the server is currently running.",
      "thread": "block_backup"
    },
    "block_device::do_primary_restore": "Restores a primary backup from the local cloud where the server is currently running.",
    "block_device::do_secondary_backup": {
      "description": "Creates a secondary backup to the remote cloud specified by block_device/secondary provider",
      "thread": "block_backup"
    },
    "block_device::do_secondary_restore": "Restores a secondary backup from the remote cloud specified by block_device/secondary provider.",
    "block_device::do_primary_backup_schedule_enable": "Enables continuous primary backups by updating the crontab file.",
    "block_device::do_primary_backup_schedule_disable": "Disables continuous primary backups by updating the crontab file.",
    "block_device::do_delete_volumes_and_terminate_server": "Deletes any currently attached volumes from the instance and then terminates the machine. WARNING: Execution of this script will delete any data on your block device!",
    "block_device::do_force_reset": "Unmounts and deletes the attached block device(s) for this lineage. Designed for test and development purposes only. WARNING: Execution of this script will delete any data on your block device!"
  },
  "version": "13.4.0"
}